# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CoordinateGenerator
                                 A QGIS plugin
 This plugin generates coordinate files from selected polygons.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-09-18
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Hiago Cardoso Arquitetura e Urbanismo
        email                : hiagocardoso.arq@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# QSettings: Used to store persistent user settings
# QTranslator: Used to manage translations, allowing the plugin to support multiple languages
# QCoreApplication: Base class for all Qt applications
# QIcon e QAction: Used to create icons and actions (such as menu items or buttons)
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog (user interface)
from .coordinate_generator_dialog import CoordinateGeneratorDialog

# Library used for file path manipulations
import os.path

# Core logic of the plugin and how it interacts with the QGIS interface
class CoordinateGenerator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        # iface parameter is the QGIS interface instance
        # Allows the plugin to interact with the QGIS application in real time
        self.iface = iface

        # Gets the directory of the plugin's Python file
        # Useful for assembling resource paths or other plugin dependencies
        self.plugin_dir = os.path.dirname(__file__)

        # Gets the user's locale setting
        # Gets the first two characters of the locale code
        # ("pt" for Portuguese or "en" for English, for example)
        locale = QSettings().value('locale/userLocale')[0:2]

        # Mount the translation file path using the plugin directory
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CoordinateGenerator_{}.qm'.format(locale))

        # Checks if the translation file exists
        if os.path.exists(locale_path):

            # Load the translator
            self.translator = QTranslator()
            self.translator.load(locale_path)

            # Install the translator in the application
            QCoreApplication.installTranslator(self.translator)

        # Declares a list that can be used to store actions (such as menu items) that the plugin creates
        self.actions = []

        # Declares the menu text where the plugin will be listed
        # The self.tr() method marks the string for translation
        self.menu = self.tr(u'&Coordinate Generator')

        # Check if plugin was started for the first time in current QGIS session
        # Must be set in initGui() method to survive plugin reloads
        self.first_start = None

    # Warning that an instance method is not using self
    # Suggests that the method can be defined as a static method
    
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """

        # Notices for the IDE:
        # Ignore type mismatch warning
        # Ignore argument list that does not match expected argument list
        # Ignore which class method is being called in a way that does not follow convention

        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CoordinateGenerator', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        # Creates an icon from the given path
        icon = QIcon(icon_path)

        # Creates a new QAction object that represents the action
        action = QAction(icon, text, parent)

        # Connects the action to the callback method
        # which means the function will be called when the action is activated
        action.triggered.connect(callback)

        # Defines whether the action should be enabled or not
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            # Set pop-up text tip if any
            action.setStatusTip(status_tip)

        if whats_this is not None:
            # Set text in the status bar if any
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds the plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            # Adds the plugin to menu
            self.iface.addPluginToMenu(
                self.menu,
                action)

        # Adds the action to the action list
        self.actions.append(action)

        # Return the action
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # Sets the plugin icon path
        # :/ indicates that it is a feature embedded in the plugin's resource file
        icon_path = ':/plugins/coordinate_generator/icon.png'
        
        # Add a new action to the QGIS menu and toolbar
        # parent parameter defines the main QGIS window
        self.add_action(
            icon_path,
            text=self.tr(u'Generate coordinates'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Initializes an attribute to control whether the plugin was started for the first time
        # Allows the plugin dialog to be created once and reused later
        # Will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # For each action that was added to the self.actions list
        for action in self.actions:

            # Removes the menu entry that was created
            self.iface.removePluginMenu(
                self.tr(u'&Coordinate Generator'),
                action)
            
            # Remove icon from toolbar
            self.iface.removeToolBarIcon(action)

    def update_active_layer(self):
        """Checks the active layer in QGIS."""
        
        # Get the active layer through the QGIS interface
        layer = self.iface.activeLayer()

        # Checks if there is an active layer
        if layer is None:

            # Display an error message if there is no active layer
            QMessageBox.warning(self.dlg, self.tr(u"Attention"), self.tr(u"There is no active layer!"))

            # Returns False if there is no active layer
            return False
        
        # Displays the name of the active layer in the dialog
        self.dlg.txtActiveLayer.setPlainText(layer.name())

        # Returns the layer if there is active layer
        return layer
    
    def populate_field_list(self, layer):
        """Populates the QListWidget with the field names from the active layer."""

        # Clear the previous list
        self.dlg.lstFields.clear()

        # Stores the field names of the active layer
        self.fields = layer.fields().names()

        # Adds fields to the list in the dialog
        self.dlg.lstFields.addItems(self.fields)

    def get_selected_fields(self):
        """Gets the list of fields selected by the user."""

        # Stores the fields of the active layer
        self.selected_fields = self.dlg.lstFields.selectedItems()

        if not self.selected_fields:

            # Displays message that no field has been selected
            QMessageBox.warning(self.dlg, self.tr(u"Attention"), self.tr(u"No field was selected."))

            # Returns False if no field is selected
            return False

        # Stores the field names of the active layer
        self.selected_field_names = [item.text() for item in self.selected_fields]

        # Returns the list of field names
        return self.selected_field_names

    def construct_file_name(self, feature, selected_fields):
        """Constructs the file name based on the selected fields and their values."""

        # Creates a list to store the values ​​of the selected fields of the polygon
        self.field_values = []

        # Iterates over selected fields
        for field in selected_fields:

            # Stores the value of the polygon field
            value = feature[field]

            # Includes a string with the field name and its value in the list
            self.field_values.append(f"{field}-{value}")

        # Returns a string that joins all fields and values ​​separated by underscores
        return "_".join(self.field_values)

    def save_polygon_coordinates(self, layer, selected_fields, folder):
        """Saves the coordinates of selected polygons to text files."""

        # Stores the selected polygons of the active layer
        self.features = layer.selectedFeatures()

        # Iterates over the selected polygons
        for feature in self.features:

            # Constructs the name of the file to be generated for the polygon
            self.file_name = self.construct_file_name(feature, selected_fields)

            # Joins the path of the selected folder with the name created for the file
            file_path = os.path.join(folder, f"{self.file_name}.txt")
            
            # Create the file
            with open(file_path, 'w') as f:

                # Stores the geometry of the polygon
                geometry = feature.geometry()

                # Creates a list of geometry vertices
                vertices = list(geometry.vertices())

                # Iterates over the vertices of the geometry
                # (with the exception of the last vertex which repeats the first)
                for vertex in vertices[:-1]:

                    # Saves the x and y coordinates separated by spaces in the file and skips to the next line
                    f.write(f"{vertex.x()} {vertex.y()}\n")

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True: # Checks if this is the first run of the plugin
            self.first_start = False # Sets the flag to False, to prevent future creation of the dialog
            self.dlg = CoordinateGeneratorDialog(self.iface) # Creates a new instance of the dialog

        # Update active layer
        self.active_layer = self.update_active_layer()
        
        if not self.active_layer:

            # If there is no active layer, do not proceed
            return  
        
        else:

            # Populates the QListWidget with the field names from the active layer
            self.populate_field_list(self.active_layer)

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        # Blocks subsequent code execution until the dialog is closed
        result = self.dlg.exec_()

        # Checks whether the dialog was closed successfully, if OK was pressed
        # implementation of what the plugin actually does after the user interacts with the GUI
        if result:
            
            # Stores the path of the selected folder
            self.folder = self.dlg.txtSelectFolder.toPlainText()

            # checks if folder is an empty string
            if not self.folder:

                # Displays message that no folder has been selected
                QMessageBox.warning(self.dlg, self.tr(u"Attention"), self.tr(u"No folder selected."))

                # Closes the plugin
                return

            # Get selected fields from dialog
            self.selected_fields = self.get_selected_fields()
            
            if not self.selected_fields:

                # If there is no field selected, do not proceed.
                return  
            
            # Run the method to generate the coordinate files
            self.save_polygon_coordinates(self.active_layer, self.selected_fields, self.folder)

            # Display success message
            QMessageBox.information(self.dlg, self.tr(u"Completed"), self.tr(u"All files have been saved successfully!"))

            # Closes the plugin
            return
